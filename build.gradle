plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.25'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.25'
    id "org.sonarqube" version "6.3.1.5724"
    id "jacoco"
}

group = 'co.edu.uniajc'
version = '0.0.1-SNAPSHOT'
description = 'seminario 1041A'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    // implementation 'org.flywaydb:flyway-core'
    // implementation 'org.flywaydb:flyway-mysql'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // AGREGAR ESTA LÍNEA (dependencia de H2):
    runtimeOnly 'com.h2database:h2'

    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0")
}

sourceSets {
    test {
        kotlin.srcDirs = ['src/test/kotlin']
        resources.srcDirs = ['src/test/resources']
    }
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll '-Xjsr305=strict'
    }
}

allOpen {
    annotation 'jakarta.persistence.Entity'
    annotation 'jakarta.persistence.MappedSuperclass'
    annotation 'jakarta.persistence.Embeddable'
}

sonar {
    properties {
        property "sonar.projectKey", "paolaa335_AgendaSalonEventos"
        property "sonar.organization", "innovapro123"
    }
}

// ==================== JACOCO CONFIGURATION ====================
jacoco {
    toolVersion = "0.8.12"
    reportsDirectory = layout.buildDirectory.dir("reports/jacoco")
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    
    reports {
        xml.required = true
        csv.required = false
        html.required = true
        html.outputLocation = layout.buildDirectory.dir("reports/jacoco/html")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5 // 50% de cobertura mínimo
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
// ==================== END JACOCO CONFIGURATION ====================

// Configuración para tests
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
}

// Configuración específica para Kotlin
tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

// Asegurar que los tests se compilen correctamente
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}